#!/usr/bin/env python
PACKAGE = "pips_trajectory_testing"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("min_ttc", double_t, 0, "Min time to collision before replan",              7,  2,   20)
gen.add("min_tte", double_t, 0, "Min time to end of current path before replan",    5,  1,   20)
gen.add("v_des", double_t, 0, "Desired linear velocity",    .25, .05, .4)
gen.add("wander",   bool_t,   0, "Wander mode",  False)

#size_enum = gen.enum([ gen.const("Small",      int_t, 3, "3 paths"),
#                       gen.const("Medium",     int_t, 5, "5 paths"),
#                       gen.const("Large",      int_t, 7, "7 paths"),
#                       gen.const("ExtraLarge", int_t, 9, "9 paths")],
#                     "An enum to set the number of paths evaluated")
                     
#gen.add("num_paths", int_t, 0, "Number of paths to evaulate (unused)", 5, 3, 9, edit_method=size_enum)

#The below size_enum is so that any future changes here won't require changes to the code
size_enum = gen.enum([ gen.const("Medium", int_t, 5, "5 paths")],  "An enum to set the number of paths evaluated")
       
gen.add("num_paths", int_t, 0, "Number of paths to evaulate ", 5, 5, 5, edit_method=size_enum)

#size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                       gen.const("Medium",     int_t, 1, "A medium constant"),
#                       gen.const("Large",      int_t, 2, "A large constant"),
#                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                     "An enum to set size")

#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)


#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "pips_controller", "PipsController"))
