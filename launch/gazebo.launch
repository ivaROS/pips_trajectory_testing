<launch>
  <arg name="world_file"  default="$(find pips_trajectory_testing)/world.xml"/>
  
  
  <arg name="debug" default="false"/>

  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
  <arg name="gui" default="true"/>
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 

    <!-- Robot description -->
  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />  


  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>
  

  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
  </include>
  
  <!--http://answers.ros.org/question/11271/call-a-service-at-startup-with-a-launch-file/# -->
  <node pkg="rosservice" type="rosservice" name="set_turtlebot_pose" args="call --wait gazebo/set_model_state '{model_state: {model_name: mobile_base, pose: {position: {x: 6.84347, y: -3.54066, z: -0.001131}, orientation: {x: 0.00315388632678, y: -0.00246070833208, z: 0.784208770176, w: 0.620484167965}}}}'"/>
  

  <rosparam command="load" param="initial_pose">
    pose: {position: {x: 6.84347, y: -3.54066, z: -0.001131}, orientation: {x: 0.00315388632678, y: -0.00246070833208, z: 0.784208770176, w: 0.620484167965}}
    model_name: mobile_base
  </rosparam>
  
  <node pkg="pips_trajectory_testing" type="set_model_pose.py" name="initial_pose_setter" />


  <node pkg="rviz" type="rviz" name="pips_rviz" args="-d $(find pips_trajectory_testing)/turtlebot_pips_gazebo.rviz">
  </node>
  

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>
</launch>
